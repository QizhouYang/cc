// Code generated by yy. DO NOT EDIT.

// Copyright 2017 The C99 Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package c99

import (
	"fmt"
)

func ExampleAbstractDeclarator_pointer() {
	fmt.Println(exampleAST(173, "\U00100000 ( _Bool * )"))
	// Output:
	// &c99.AbstractDeclarator{
	// · Pointer: &c99.Pointer{
	// · · Token: '*',
	// · },
	// }
}

func ExampleAbstractDeclarator_abstract() {
	fmt.Println(exampleAST(174, "\U00100000 ( _Bool ( ) )"))
	// Output:
	// &c99.AbstractDeclarator{
	// · Case: 1,
	// · DirectAbstractDeclarator: &c99.DirectAbstractDeclarator{
	// · · Case: 1,
	// · · Token: '(',
	// · · Token2: ')',
	// · },
	// }
}

func ExampleAbstractDeclaratorOpt_case0() {
	fmt.Println(exampleAST(175, "\U00100000 ( _Bool )") == (*AbstractDeclaratorOpt)(nil))
	// Output:
	// true
}

func ExampleAbstractDeclaratorOpt_case1() {
	fmt.Println(exampleAST(176, "\U00100000 ( _Bool * )"))
	// Output:
	// &c99.AbstractDeclaratorOpt{
	// · AbstractDeclarator: &c99.AbstractDeclarator{
	// · · Pointer: &c99.Pointer{
	// · · · Token: '*',
	// · · },
	// · },
	// }
}

func ExampleArgumentExprList_case0() {
	fmt.Println(exampleAST(4, "\U00100000 'a' ( 'b' )"))
	// Output:
	// &c99.ArgumentExprList{
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// }
}

func ExampleArgumentExprList_case1() {
	fmt.Println(exampleAST(5, "\U00100000 'a' ( 'b' , 'c' )"))
	// Output:
	// &c99.ArgumentExprList{
	// · ArgumentExprList: &c99.ArgumentExprList{
	// · · Case: 1,
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'c'",
	// · · },
	// · · Token: ',',
	// · },
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// }
}

func ExampleArgumentExprListOpt_case0() {
	fmt.Println(exampleAST(6, "\U00100000 'a' ( )") == (*ArgumentExprListOpt)(nil))
	// Output:
	// true
}

func ExampleArgumentExprListOpt_case1() {
	fmt.Println(exampleAST(7, "\U00100000 'a' ( 'b' )"))
	// Output:
	// &c99.ArgumentExprListOpt{
	// · ArgumentExprList: &c99.ArgumentExprList{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// }
}

func ExampleBlockItem_decl() {
	fmt.Println(exampleAST(214, "\U00100001 a { auto ; !"))
	// Output:
	// &c99.BlockItem{
	// · Declaration: &c99.Declaration{
	// · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · Case: 1,
	// · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · Case: 2,
	// · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · Case: 3,
	// · · · · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · · · · Case: 2,
	// · · · · · · · · Token: CHAR "char",
	// · · · · · · · },
	// · · · · · · },
	// · · · · · },
	// · · · · · TypeQualifier: &c99.TypeQualifier{
	// · · · · · · Token: CONST "const",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · Case: 3,
	// · · · · Token: STATIC "static",
	// · · · },
	// · · },
	// · · InitDeclaratorListOpt: &c99.InitDeclaratorListOpt{
	// · · · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · · · InitDeclarator: &c99.InitDeclarator{
	// · · · · · Case: 1,
	// · · · · · Declarator: &c99.Declarator{
	// · · · · · · Linkage: LinkageNone,
	// · · · · · · Scope: &c99.Scope{
	// · · · · · · },
	// · · · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · Case: DirectDeclaratorArray,
	// · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · Case: DirectDeclaratorIdent,
	// · · · · · · · · Token: IDENTIFIER "__func__",
	// · · · · · · · },
	// · · · · · · · Token: '[',
	// · · · · · · · Token2: ']',
	// · · · · · · },
	// · · · · · },
	// · · · · · Initializer: &c99.Initializer{
	// · · · · · · Case: 1,
	// · · · · · · Expr: &c99.Expr{
	// · · · · · · · Case: ExprString,
	// · · · · · · · Token: STRINGLITERAL "\"a\"",
	// · · · · · · },
	// · · · · · },
	// · · · · · Token: '=',
	// · · · · },
	// · · · },
	// · · },
	// · · Token: ';',
	// · },
	// }
}

func ExampleBlockItem_stmt() {
	fmt.Println(exampleAST(215, "\U00100001 a { ; !"))
	// Output:
	// &c99.BlockItem{
	// · Case: 1,
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// }
}

func ExampleBlockItemList_case0() {
	fmt.Println(exampleAST(210, "\U00100001 a { ; !"))
	// Output:
	// &c99.BlockItemList{
	// · BlockItem: &c99.BlockItem{
	// · · Declaration: &c99.Declaration{
	// · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · Case: 1,
	// · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · Case: 2,
	// · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · Case: 3,
	// · · · · · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · · · · · Case: 2,
	// · · · · · · · · · Token: CHAR "char",
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · },
	// · · · · · · TypeQualifier: &c99.TypeQualifier{
	// · · · · · · · Token: CONST "const",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · Case: 3,
	// · · · · · Token: STATIC "static",
	// · · · · },
	// · · · },
	// · · · InitDeclaratorListOpt: &c99.InitDeclaratorListOpt{
	// · · · · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · · · · InitDeclarator: &c99.InitDeclarator{
	// · · · · · · Case: 1,
	// · · · · · · Declarator: &c99.Declarator{
	// · · · · · · · Linkage: LinkageNone,
	// · · · · · · · Scope: &c99.Scope{
	// · · · · · · · },
	// · · · · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · Case: DirectDeclaratorArray,
	// · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · Case: DirectDeclaratorIdent,
	// · · · · · · · · · Token: IDENTIFIER "__func__",
	// · · · · · · · · },
	// · · · · · · · · Token: '[',
	// · · · · · · · · Token2: ']',
	// · · · · · · · },
	// · · · · · · },
	// · · · · · · Initializer: &c99.Initializer{
	// · · · · · · · Case: 1,
	// · · · · · · · Expr: &c99.Expr{
	// · · · · · · · · Case: ExprString,
	// · · · · · · · · Token: STRINGLITERAL "\"a\"",
	// · · · · · · · },
	// · · · · · · },
	// · · · · · · Token: '=',
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · Token: ';',
	// · · },
	// · },
	// }
}

func ExampleBlockItemList_case1() {
	fmt.Println(exampleAST(211, "\U00100001 a { ; ; !"))
	// Output:
	// &c99.BlockItemList{
	// · BlockItem: &c99.BlockItem{
	// · · Declaration: &c99.Declaration{
	// · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · Case: 1,
	// · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · Case: 2,
	// · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · Case: 3,
	// · · · · · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · · · · · Case: 2,
	// · · · · · · · · · Token: CHAR "char",
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · },
	// · · · · · · TypeQualifier: &c99.TypeQualifier{
	// · · · · · · · Token: CONST "const",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · Case: 3,
	// · · · · · Token: STATIC "static",
	// · · · · },
	// · · · },
	// · · · InitDeclaratorListOpt: &c99.InitDeclaratorListOpt{
	// · · · · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · · · · InitDeclarator: &c99.InitDeclarator{
	// · · · · · · Case: 1,
	// · · · · · · Declarator: &c99.Declarator{
	// · · · · · · · Linkage: LinkageNone,
	// · · · · · · · Scope: &c99.Scope{
	// · · · · · · · },
	// · · · · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · Case: DirectDeclaratorArray,
	// · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · Case: DirectDeclaratorIdent,
	// · · · · · · · · · Token: IDENTIFIER "__func__",
	// · · · · · · · · },
	// · · · · · · · · Token: '[',
	// · · · · · · · · Token2: ']',
	// · · · · · · · },
	// · · · · · · },
	// · · · · · · Initializer: &c99.Initializer{
	// · · · · · · · Case: 1,
	// · · · · · · · Expr: &c99.Expr{
	// · · · · · · · · Case: ExprString,
	// · · · · · · · · Token: STRINGLITERAL "\"a\"",
	// · · · · · · · },
	// · · · · · · },
	// · · · · · · Token: '=',
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · Token: ';',
	// · · },
	// · },
	// · BlockItemList: &c99.BlockItemList{
	// · · BlockItem: &c99.BlockItem{
	// · · · Case: 1,
	// · · · Stmt: &c99.Stmt{
	// · · · · Case: 1,
	// · · · · ExprStmt: &c99.ExprStmt{
	// · · · · · Token: ';',
	// · · · · },
	// · · · },
	// · · },
	// · · Case: 1,
	// · },
	// }
}

func ExampleBlockItemListOpt_case0() {
	fmt.Println(exampleAST(212, "\U00100001 a { }") == (*BlockItemListOpt)(nil))
	// Output:
	// false
}

func ExampleBlockItemListOpt_case1() {
	fmt.Println(exampleAST(213, "\U00100001 a { ; }"))
	// Output:
	// &c99.BlockItemListOpt{
	// · BlockItemList: &c99.BlockItemList{
	// · · BlockItem: &c99.BlockItem{
	// · · · Declaration: &c99.Declaration{
	// · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · Case: 1,
	// · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · Case: 2,
	// · · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · Case: 3,
	// · · · · · · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · · · · · · Case: 2,
	// · · · · · · · · · · Token: CHAR "char",
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · · TypeQualifier: &c99.TypeQualifier{
	// · · · · · · · · Token: CONST "const",
	// · · · · · · · },
	// · · · · · · },
	// · · · · · },
	// · · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · · Case: 3,
	// · · · · · · Token: STATIC "static",
	// · · · · · },
	// · · · · },
	// · · · · InitDeclaratorListOpt: &c99.InitDeclaratorListOpt{
	// · · · · · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · · · · · InitDeclarator: &c99.InitDeclarator{
	// · · · · · · · Case: 1,
	// · · · · · · · Declarator: &c99.Declarator{
	// · · · · · · · · Linkage: LinkageNone,
	// · · · · · · · · Scope: &c99.Scope{
	// · · · · · · · · },
	// · · · · · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · Case: DirectDeclaratorArray,
	// · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · Case: DirectDeclaratorIdent,
	// · · · · · · · · · · Token: IDENTIFIER "__func__",
	// · · · · · · · · · },
	// · · · · · · · · · Token: '[',
	// · · · · · · · · · Token2: ']',
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · · Initializer: &c99.Initializer{
	// · · · · · · · · Case: 1,
	// · · · · · · · · Expr: &c99.Expr{
	// · · · · · · · · · Case: ExprString,
	// · · · · · · · · · Token: STRINGLITERAL "\"a\"",
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · · Token: '=',
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · · Token: ';',
	// · · · },
	// · · },
	// · · BlockItemList: &c99.BlockItemList{
	// · · · BlockItem: &c99.BlockItem{
	// · · · · Case: 1,
	// · · · · Stmt: &c99.Stmt{
	// · · · · · Case: 1,
	// · · · · · ExprStmt: &c99.ExprStmt{
	// · · · · · · Token: ';',
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · Case: 1,
	// · · },
	// · },
	// }
}

func ExampleCommaOpt_case0() {
	fmt.Println(exampleAST(125, "\U00100000 ( _Bool ) { }") == (*CommaOpt)(nil))
	// Output:
	// true
}

func ExampleCommaOpt_case1() {
	fmt.Println(exampleAST(126, "\U00100000 ( _Bool ) { , }"))
	// Output:
	// &c99.CommaOpt{
	// · Token: ',',
	// }
}

func ExampleCompoundStmt_case0() {
	fmt.Println(exampleAST(209, "\U00100001 a { }"))
	// Output:
	// &c99.CompoundStmt{
	// · BlockItemListOpt: &c99.BlockItemListOpt{
	// · · BlockItemList: &c99.BlockItemList{
	// · · · BlockItem: &c99.BlockItem{
	// · · · · Declaration: &c99.Declaration{
	// · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · Case: 1,
	// · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · Case: 2,
	// · · · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · · Case: 3,
	// · · · · · · · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · · · · · · · Case: 2,
	// · · · · · · · · · · · Token: CHAR "char",
	// · · · · · · · · · · },
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · · TypeQualifier: &c99.TypeQualifier{
	// · · · · · · · · · Token: CONST "const",
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · },
	// · · · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · · · Case: 3,
	// · · · · · · · Token: STATIC "static",
	// · · · · · · },
	// · · · · · },
	// · · · · · InitDeclaratorListOpt: &c99.InitDeclaratorListOpt{
	// · · · · · · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · · · · · · InitDeclarator: &c99.InitDeclarator{
	// · · · · · · · · Case: 1,
	// · · · · · · · · Declarator: &c99.Declarator{
	// · · · · · · · · · Linkage: LinkageNone,
	// · · · · · · · · · Scope: &c99.Scope{
	// · · · · · · · · · },
	// · · · · · · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · Case: DirectDeclaratorArray,
	// · · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · · Case: DirectDeclaratorIdent,
	// · · · · · · · · · · · Token: IDENTIFIER "__func__",
	// · · · · · · · · · · },
	// · · · · · · · · · · Token: '[',
	// · · · · · · · · · · Token2: ']',
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · · Initializer: &c99.Initializer{
	// · · · · · · · · · Case: 1,
	// · · · · · · · · · Expr: &c99.Expr{
	// · · · · · · · · · · Case: ExprString,
	// · · · · · · · · · · Token: STRINGLITERAL "\"a\"",
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · · Token: '=',
	// · · · · · · · },
	// · · · · · · },
	// · · · · · },
	// · · · · · Token: ';',
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: '{',
	// · Token2: '}',
	// }
}

func ExampleConstExpr_case0() {
	fmt.Println(exampleAST(72, "\U00100000 'a'"))
	// Output:
	// &c99.ConstExpr{
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// }
}

func ExampleDeclaration_case0() {
	fmt.Println(exampleAST(73, "\U00100001 auto ;"))
	// Output:
	// &c99.Declaration{
	// · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · Case: 1,
	// · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · Token: AUTO "auto",
	// · · },
	// · },
	// · Token: ';',
	// }
}

func ExampleDeclarationList_case0() {
	fmt.Println(exampleAST(238, "\U00100001 a auto ; {"))
	// Output:
	// &c99.DeclarationList{
	// · Declaration: &c99.Declaration{
	// · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · Case: 1,
	// · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · Token: AUTO "auto",
	// · · · },
	// · · },
	// · · Token: ';',
	// · },
	// }
}

func ExampleDeclarationList_case1() {
	fmt.Println(exampleAST(239, "\U00100001 a auto ; auto ; {"))
	// Output:
	// &c99.DeclarationList{
	// · Declaration: &c99.Declaration{
	// · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · Case: 1,
	// · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · Token: AUTO "auto",
	// · · · },
	// · · },
	// · · Token: ';',
	// · },
	// · DeclarationList: &c99.DeclarationList{
	// · · Case: 1,
	// · · Declaration: &c99.Declaration{
	// · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · Case: 1,
	// · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · Token: AUTO "auto",
	// · · · · },
	// · · · },
	// · · · Token: ';',
	// · · },
	// · },
	// }
}

func ExampleDeclarationListOpt_case0() {
	fmt.Println(exampleAST(240, "\U00100001 a {") == (*DeclarationListOpt)(nil))
	// Output:
	// true
}

func ExampleDeclarationListOpt_case1() {
	fmt.Println(exampleAST(241, "\U00100001 a auto ; {"))
	// Output:
	// &c99.DeclarationListOpt{
	// · DeclarationList: &c99.DeclarationList{
	// · · Declaration: &c99.Declaration{
	// · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · Case: 1,
	// · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · Token: AUTO "auto",
	// · · · · },
	// · · · },
	// · · · Token: ';',
	// · · },
	// · },
	// }
}

func ExampleDeclarationSpecifiers_func() {
	fmt.Println(exampleAST(74, "\U00100001 inline ("))
	// Output:
	// &c99.DeclarationSpecifiers{
	// · FunctionSpecifier: &c99.FunctionSpecifier{
	// · · Token: INLINE "inline",
	// · },
	// }
}

func ExampleDeclarationSpecifiers_storage() {
	fmt.Println(exampleAST(75, "\U00100001 auto ("))
	// Output:
	// &c99.DeclarationSpecifiers{
	// · Case: 1,
	// · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · Token: AUTO "auto",
	// · },
	// }
}

func ExampleDeclarationSpecifiers_qualifier() {
	fmt.Println(exampleAST(76, "\U00100001 const ("))
	// Output:
	// &c99.DeclarationSpecifiers{
	// · Case: 2,
	// · TypeQualifier: &c99.TypeQualifier{
	// · · Token: CONST "const",
	// · },
	// }
}

func ExampleDeclarationSpecifiers_specifier() {
	fmt.Println(exampleAST(77, "\U00100001 _Bool ("))
	// Output:
	// &c99.DeclarationSpecifiers{
	// · Case: 3,
	// · TypeSpecifier: &c99.TypeSpecifier{
	// · · Token: BOOL "_Bool",
	// · },
	// }
}

func ExampleDeclarationSpecifiersOpt_case0() {
	fmt.Println(exampleAST(78, "\U00100001 inline (") == (*DeclarationSpecifiersOpt)(nil))
	// Output:
	// true
}

func ExampleDeclarationSpecifiersOpt_case1() {
	fmt.Println(exampleAST(79, "\U00100001 const auto ("))
	// Output:
	// &c99.DeclarationSpecifiersOpt{
	// · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · Case: 1,
	// · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · Token: AUTO "auto",
	// · · },
	// · },
	// }
}

func ExampleDeclarator_case0() {
	fmt.Println(exampleAST(137, "\U00100001 a )"))
	// Output:
	// &c99.Declarator{
	// · Linkage: LinkageNone,
	// · StorageDuration: StorageDurationAutomatic,
	// · DirectDeclarator: &c99.DirectDeclarator{
	// · · Case: DirectDeclaratorIdent,
	// · · Token: IDENTIFIER "a",
	// · },
	// }
}

func ExampleDeclaratorOpt_case0() {
	fmt.Println(exampleAST(138, "\U00100001 struct { _Bool :") == (*DeclaratorOpt)(nil))
	// Output:
	// true
}

func ExampleDeclaratorOpt_case1() {
	fmt.Println(exampleAST(139, "\U00100001 struct { _Bool a :"))
	// Output:
	// &c99.DeclaratorOpt{
	// · Declarator: &c99.Declarator{
	// · · Linkage: LinkageNone,
	// · · Scope: &c99.Scope{
	// · · },
	// · · StorageDuration: StorageDurationAutomatic,
	// · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · Case: DirectDeclaratorIdent,
	// · · · Token: IDENTIFIER "a",
	// · · },
	// · },
	// }
}

func ExampleDesignation_case0() {
	fmt.Println(exampleAST(194, "\U00100001 auto a = { . b = !"))
	// Output:
	// &c99.Designation{
	// · DesignatorList: &c99.DesignatorList{
	// · · Designator: &c99.Designator{
	// · · · Token: '.',
	// · · · Token2: IDENTIFIER "b",
	// · · },
	// · },
	// · Token: '=',
	// }
}

func ExampleDesignator_field() {
	fmt.Println(exampleAST(197, "\U00100001 auto a = { . b ."))
	// Output:
	// &c99.Designator{
	// · Token: '.',
	// · Token2: IDENTIFIER "b",
	// }
}

func ExampleDesignator_index() {
	fmt.Println(exampleAST(198, "\U00100001 auto a = { [ 'b' ] ."))
	// Output:
	// &c99.Designator{
	// · Case: 1,
	// · ConstExpr: &c99.ConstExpr{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Token: '[',
	// · Token2: ']',
	// }
}

func ExampleDesignatorList_case0() {
	fmt.Println(exampleAST(195, "\U00100000 ( _Bool ) { . a ."))
	// Output:
	// &c99.DesignatorList{
	// · Designator: &c99.Designator{
	// · · Token: '.',
	// · · Token2: IDENTIFIER "a",
	// · },
	// }
}

func ExampleDesignatorList_case1() {
	fmt.Println(exampleAST(196, "\U00100001 auto a = { . b . c ."))
	// Output:
	// &c99.DesignatorList{
	// · Designator: &c99.Designator{
	// · · Token: '.',
	// · · Token2: IDENTIFIER "b",
	// · },
	// · DesignatorList: &c99.DesignatorList{
	// · · Case: 1,
	// · · Designator: &c99.Designator{
	// · · · Token: '.',
	// · · · Token2: IDENTIFIER "c",
	// · · },
	// · },
	// }
}

func ExampleDirectAbstractDeclarator_abstract() {
	fmt.Println(exampleAST(177, "\U00100000 ( _Bool ( * ) ("))
	// Output:
	// &c99.DirectAbstractDeclarator{
	// · AbstractDeclarator: &c99.AbstractDeclarator{
	// · · Pointer: &c99.Pointer{
	// · · · Token: '*',
	// · · },
	// · },
	// · Token: '(',
	// · Token2: ')',
	// }
}

func ExampleDirectAbstractDeclarator_paramList() {
	fmt.Println(exampleAST(178, "\U00100000 ( _Bool ( ) ("))
	// Output:
	// &c99.DirectAbstractDeclarator{
	// · Case: 1,
	// · Token: '(',
	// · Token2: ')',
	// }
}

func ExampleDirectAbstractDeclarator_dFn() {
	fmt.Println(exampleAST(179, "\U00100000 ( _Bool ( ) ( ) ("))
	// Output:
	// &c99.DirectAbstractDeclarator{
	// · Case: 2,
	// · DirectAbstractDeclarator: &c99.DirectAbstractDeclarator{
	// · · Case: 1,
	// · · Token: '(',
	// · · Token2: ')',
	// · },
	// · Token: '(',
	// · Token2: ')',
	// }
}

func ExampleDirectAbstractDeclarator_dArrSize() {
	fmt.Println(exampleAST(180, "\U00100000 ( _Bool [ static 'a' ] ("))
	// Output:
	// &c99.DirectAbstractDeclarator{
	// · Case: 3,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '[',
	// · Token2: STATIC "static",
	// · Token3: ']',
	// }
}

func ExampleDirectAbstractDeclarator_dArrVL() {
	fmt.Println(exampleAST(181, "\U00100000 ( _Bool [ * ] ("))
	// Output:
	// &c99.DirectAbstractDeclarator{
	// · Case: 4,
	// · Token: '[',
	// · Token2: '*',
	// · Token3: ']',
	// }
}

func ExampleDirectAbstractDeclarator_dArr() {
	fmt.Println(exampleAST(182, "\U00100000 ( _Bool [ ] ("))
	// Output:
	// &c99.DirectAbstractDeclarator{
	// · Case: 5,
	// · Token: '[',
	// · Token2: ']',
	// }
}

func ExampleDirectAbstractDeclarator_dArrSize2() {
	fmt.Println(exampleAST(183, "\U00100000 ( _Bool [ const static 'a' ] ("))
	// Output:
	// &c99.DirectAbstractDeclarator{
	// · Case: 6,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '[',
	// · Token2: STATIC "static",
	// · Token3: ']',
	// · TypeQualifierList: &c99.TypeQualifierList{
	// · · TypeQualifier: &c99.TypeQualifier{
	// · · · Token: CONST "const",
	// · · },
	// · },
	// }
}

func ExampleDirectAbstractDeclarator_dArr2() {
	fmt.Println(exampleAST(184, "\U00100000 ( _Bool [ const ] ("))
	// Output:
	// &c99.DirectAbstractDeclarator{
	// · Case: 7,
	// · Token: '[',
	// · Token2: ']',
	// · TypeQualifierList: &c99.TypeQualifierList{
	// · · TypeQualifier: &c99.TypeQualifier{
	// · · · Token: CONST "const",
	// · · },
	// · },
	// }
}

func ExampleDirectAbstractDeclaratorOpt_case0() {
	fmt.Println(exampleAST(185, "\U00100000 ( _Bool [") == (*DirectAbstractDeclaratorOpt)(nil))
	// Output:
	// true
}

func ExampleDirectAbstractDeclaratorOpt_case1() {
	fmt.Println(exampleAST(186, "\U00100000 ( _Bool ( ) ["))
	// Output:
	// &c99.DirectAbstractDeclaratorOpt{
	// · DirectAbstractDeclarator: &c99.DirectAbstractDeclarator{
	// · · Case: 1,
	// · · Token: '(',
	// · · Token2: ')',
	// · },
	// }
}

func ExampleDirectDeclarator_paren() {
	fmt.Println(exampleAST(140, "\U00100001 ( a ) ("))
	// Output:
	// &c99.DirectDeclarator{
	// · Case: DirectDeclaratorParen,
	// · Declarator: &c99.Declarator{
	// · · Linkage: LinkageNone,
	// · · StorageDuration: StorageDurationAutomatic,
	// · · Embedded: true,
	// · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · Case: DirectDeclaratorIdent,
	// · · · Token: IDENTIFIER "a",
	// · · },
	// · },
	// · Token: '(',
	// · Token2: ')',
	// }
}

func ExampleDirectDeclarator_identList() {
	fmt.Println(exampleAST(142, "\U00100001 a ( ) ("))
	// Output:
	// &c99.DirectDeclarator{
	// · Case: DirectDeclaratorIdentList,
	// · DirectDeclarator: &c99.DirectDeclarator{
	// · · Case: DirectDeclaratorIdent,
	// · · Token: IDENTIFIER "a",
	// · },
	// · Token: '(',
	// · Token2: ')',
	// }
}

func ExampleDirectDeclarator_paramList() {
	fmt.Println(exampleAST(144, "\U00100001 a ( auto ) ("))
	// Output:
	// &c99.DirectDeclarator{
	// · Case: DirectDeclaratorParamList,
	// · DirectDeclarator: &c99.DirectDeclarator{
	// · · Case: DirectDeclaratorIdent,
	// · · Token: IDENTIFIER "a",
	// · },
	// · ParameterTypeList: &c99.ParameterTypeList{
	// · · ParameterList: &c99.ParameterList{
	// · · · ParameterDeclaration: &c99.ParameterDeclaration{
	// · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · Case: 1,
	// · · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · · Token: AUTO "auto",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: '(',
	// · Token2: ')',
	// }
}

func ExampleDirectDeclarator_arraySize() {
	fmt.Println(exampleAST(145, "\U00100001 a [ static 'b' ] ("))
	// Output:
	// &c99.DirectDeclarator{
	// · Case: DirectDeclaratorArraySize,
	// · DirectDeclarator: &c99.DirectDeclarator{
	// · · Case: DirectDeclaratorIdent,
	// · · Token: IDENTIFIER "a",
	// · },
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '[',
	// · Token2: STATIC "static",
	// · Token3: ']',
	// }
}

func ExampleDirectDeclarator_arraySize2() {
	fmt.Println(exampleAST(146, "\U00100001 a [ const static 'b' ] ("))
	// Output:
	// &c99.DirectDeclarator{
	// · Case: DirectDeclaratorArraySize2,
	// · DirectDeclarator: &c99.DirectDeclarator{
	// · · Case: DirectDeclaratorIdent,
	// · · Token: IDENTIFIER "a",
	// · },
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '[',
	// · Token2: STATIC "static",
	// · Token3: ']',
	// · TypeQualifierList: &c99.TypeQualifierList{
	// · · TypeQualifier: &c99.TypeQualifier{
	// · · · Token: CONST "const",
	// · · },
	// · },
	// }
}

func ExampleDirectDeclarator_arrayVar() {
	fmt.Println(exampleAST(147, "\U00100001 a [ * ] ("))
	// Output:
	// &c99.DirectDeclarator{
	// · Case: DirectDeclaratorArrayVar,
	// · DirectDeclarator: &c99.DirectDeclarator{
	// · · Case: DirectDeclaratorIdent,
	// · · Token: IDENTIFIER "a",
	// · },
	// · Token: '[',
	// · Token2: '*',
	// · Token3: ']',
	// }
}

func ExampleDirectDeclarator_array() {
	fmt.Println(exampleAST(148, "\U00100001 a [ ] ("))
	// Output:
	// &c99.DirectDeclarator{
	// · Case: DirectDeclaratorArray,
	// · DirectDeclarator: &c99.DirectDeclarator{
	// · · Case: DirectDeclaratorIdent,
	// · · Token: IDENTIFIER "a",
	// · },
	// · Token: '[',
	// · Token2: ']',
	// }
}

func ExampleDirectDeclarator_ident() {
	fmt.Println(exampleAST(149, "\U00100001 a ("))
	// Output:
	// &c99.DirectDeclarator{
	// · Case: DirectDeclaratorIdent,
	// · Token: IDENTIFIER "a",
	// }
}

func ExampleEnumSpecifier_tag() {
	fmt.Println(exampleAST(127, "\U00100001 enum a ("))
	// Output:
	// &c99.EnumSpecifier{
	// · Token: ENUM "enum",
	// · Token2: IDENTIFIER "a",
	// }
}

func ExampleEnumSpecifier_define() {
	fmt.Println(exampleAST(128, "\U00100001 enum { a } ("))
	// Output:
	// &c99.EnumSpecifier{
	// · Case: 1,
	// · EnumeratorList: &c99.EnumeratorList{
	// · · Enumerator: &c99.Enumerator{
	// · · · EnumerationConstant: &c99.EnumerationConstant{
	// · · · · Token: IDENTIFIER "a",
	// · · · },
	// · · },
	// · },
	// · Token: ENUM "enum",
	// · Token2: '{',
	// · Token3: '}',
	// }
}

func ExampleEnumerationConstant_case0() {
	fmt.Println(exampleAST(3, "\U00100001 enum { a ,"))
	// Output:
	// &c99.EnumerationConstant{
	// · Token: IDENTIFIER "a",
	// }
}

func ExampleEnumerator_base() {
	fmt.Println(exampleAST(131, "\U00100001 enum { a ,"))
	// Output:
	// &c99.Enumerator{
	// · EnumerationConstant: &c99.EnumerationConstant{
	// · · Token: IDENTIFIER "a",
	// · },
	// }
}

func ExampleEnumerator_init() {
	fmt.Println(exampleAST(132, "\U00100001 enum { a = 'b' ,"))
	// Output:
	// &c99.Enumerator{
	// · Case: 1,
	// · ConstExpr: &c99.ConstExpr{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · EnumerationConstant: &c99.EnumerationConstant{
	// · · Token: IDENTIFIER "a",
	// · },
	// · Token: '=',
	// }
}

func ExampleEnumeratorList_case0() {
	fmt.Println(exampleAST(129, "\U00100001 enum { a ,"))
	// Output:
	// &c99.EnumeratorList{
	// · Enumerator: &c99.Enumerator{
	// · · EnumerationConstant: &c99.EnumerationConstant{
	// · · · Token: IDENTIFIER "a",
	// · · },
	// · },
	// }
}

func ExampleEnumeratorList_case1() {
	fmt.Println(exampleAST(130, "\U00100001 enum { a , b ,"))
	// Output:
	// &c99.EnumeratorList{
	// · Enumerator: &c99.Enumerator{
	// · · EnumerationConstant: &c99.EnumerationConstant{
	// · · · Token: IDENTIFIER "a",
	// · · },
	// · },
	// · EnumeratorList: &c99.EnumeratorList{
	// · · Case: 1,
	// · · Enumerator: &c99.Enumerator{
	// · · · EnumerationConstant: &c99.EnumerationConstant{
	// · · · · Token: IDENTIFIER "b",
	// · · · },
	// · · },
	// · · Token: ',',
	// · },
	// }
}

func ExampleExpr_preInc() {
	fmt.Println(exampleAST(8, "\U00100000 ++ 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprPreInc,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: INC,
	// }
}

func ExampleExpr_preDec() {
	fmt.Println(exampleAST(9, "\U00100000 -- 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprPreDec,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: DEC,
	// }
}

func ExampleExpr_alignofType() {
	fmt.Println(exampleAST(10, "\U00100000 __alignof__ ( _Bool )"))
	// Output:
	// &c99.Expr{
	// · Case: ExprAlignofType,
	// · Token: ALIGNOF "__alignof__",
	// · Token2: '(',
	// · Token3: ')',
	// · TypeName: &c99.TypeName{
	// · · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · · Case: 1,
	// · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · Token: BOOL "_Bool",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpr_alignofExpr() {
	fmt.Println(exampleAST(11, "\U00100000 __alignof__ 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprAlignofExpr,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: ALIGNOF "__alignof__",
	// }
}

func ExampleExpr_sizeofType() {
	fmt.Println(exampleAST(12, "\U00100000 sizeof ( _Bool )"))
	// Output:
	// &c99.Expr{
	// · Case: ExprSizeofType,
	// · Token: SIZEOF "sizeof",
	// · Token2: '(',
	// · Token3: ')',
	// · TypeName: &c99.TypeName{
	// · · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · · Case: 1,
	// · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · Token: BOOL "_Bool",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpr_sizeofExpr() {
	fmt.Println(exampleAST(13, "\U00100000 sizeof 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprSizeofExpr,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: SIZEOF "sizeof",
	// }
}

func ExampleExpr_not() {
	fmt.Println(exampleAST(14, "\U00100000 ! 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprNot,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '!',
	// }
}

func ExampleExpr_addrof() {
	fmt.Println(exampleAST(15, "\U00100000 & 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprAddrof,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '&',
	// }
}

func ExampleExpr_pExprList() {
	fmt.Println(exampleAST(16, "\U00100000 ( 'a' )"))
	// Output:
	// &c99.Expr{
	// · Case: ExprPExprList,
	// · ExprList: &c99.ExprList{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'a'",
	// · · },
	// · },
	// · Token: '(',
	// · Token2: ')',
	// }
}

func ExampleExpr_compLit() {
	fmt.Println(exampleAST(17, "\U00100000 ( _Bool ) { }"))
	// Output:
	// &c99.Expr{
	// · Case: ExprCompLit,
	// · Token: '(',
	// · Token2: ')',
	// · Token3: '{',
	// · Token4: '}',
	// · TypeName: &c99.TypeName{
	// · · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · · Case: 1,
	// · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · Token: BOOL "_Bool",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpr_cast() {
	fmt.Println(exampleAST(18, "\U00100000 ( _Bool ) 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprCast,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '(',
	// · Token2: ')',
	// · TypeName: &c99.TypeName{
	// · · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · · Case: 1,
	// · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · Token: BOOL "_Bool",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpr_deref() {
	fmt.Println(exampleAST(19, "\U00100000 * 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprDeref,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '*',
	// }
}

func ExampleExpr_unaryPlus() {
	fmt.Println(exampleAST(20, "\U00100000 + 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprUnaryPlus,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '+',
	// }
}

func ExampleExpr_unaryMinus() {
	fmt.Println(exampleAST(21, "\U00100000 - 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprUnaryMinus,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '-',
	// }
}

func ExampleExpr_cpl() {
	fmt.Println(exampleAST(22, "\U00100000 ~ 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprCpl,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '~',
	// }
}

func ExampleExpr_char() {
	fmt.Println(exampleAST(23, "\U00100000 'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprChar,
	// · Token: CHARCONST "'a'",
	// }
}

func ExampleExpr_ne() {
	fmt.Println(exampleAST(24, "\U00100000 'a' != 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprNe,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: NEQ,
	// }
}

func ExampleExpr_modAssign() {
	fmt.Println(exampleAST(25, "\U00100000 'a' %= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprModAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: MODASSIGN,
	// }
}

func ExampleExpr_lAnd() {
	fmt.Println(exampleAST(26, "\U00100000 'a' && 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprLAnd,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: ANDAND,
	// }
}

func ExampleExpr_andAssign() {
	fmt.Println(exampleAST(27, "\U00100000 'a' &= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprAndAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: ANDASSIGN,
	// }
}

func ExampleExpr_mulAssign() {
	fmt.Println(exampleAST(28, "\U00100000 'a' *= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprMulAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: MULASSIGN,
	// }
}

func ExampleExpr_postInc() {
	fmt.Println(exampleAST(29, "\U00100000 'a' ++"))
	// Output:
	// &c99.Expr{
	// · Case: ExprPostInc,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: INC,
	// }
}

func ExampleExpr_addAssign() {
	fmt.Println(exampleAST(30, "\U00100000 'a' += 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprAddAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: ADDASSIGN,
	// }
}

func ExampleExpr_postDec() {
	fmt.Println(exampleAST(31, "\U00100000 'a' --"))
	// Output:
	// &c99.Expr{
	// · Case: ExprPostDec,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: DEC,
	// }
}

func ExampleExpr_subAssign() {
	fmt.Println(exampleAST(32, "\U00100000 'a' -= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprSubAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: SUBASSIGN,
	// }
}

func ExampleExpr_pSelect() {
	fmt.Println(exampleAST(33, "\U00100000 'a' -> b"))
	// Output:
	// &c99.Expr{
	// · Case: ExprPSelect,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: ARROW,
	// · Token2: IDENTIFIER "b",
	// }
}

func ExampleExpr_divAssign() {
	fmt.Println(exampleAST(34, "\U00100000 'a' /= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprDivAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: DIVASSIGN,
	// }
}

func ExampleExpr_lsh() {
	fmt.Println(exampleAST(35, "\U00100000 'a' << 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprLsh,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: LSH,
	// }
}

func ExampleExpr_lshAssign() {
	fmt.Println(exampleAST(36, "\U00100000 'a' <<= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprLshAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: LSHASSIGN,
	// }
}

func ExampleExpr_le() {
	fmt.Println(exampleAST(37, "\U00100000 'a' <= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprLe,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: LEQ,
	// }
}

func ExampleExpr_eq() {
	fmt.Println(exampleAST(38, "\U00100000 'a' == 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprEq,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: EQ,
	// }
}

func ExampleExpr_ge() {
	fmt.Println(exampleAST(39, "\U00100000 'a' >= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprGe,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: GEQ,
	// }
}

func ExampleExpr_rsh() {
	fmt.Println(exampleAST(40, "\U00100000 'a' >> 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprRsh,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: RSH,
	// }
}

func ExampleExpr_rshAssign() {
	fmt.Println(exampleAST(41, "\U00100000 'a' >>= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprRshAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: RSHASSIGN,
	// }
}

func ExampleExpr_xorAssign() {
	fmt.Println(exampleAST(42, "\U00100000 'a' ^= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprXorAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: XORASSIGN,
	// }
}

func ExampleExpr_orAssign() {
	fmt.Println(exampleAST(43, "\U00100000 'a' |= 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprOrAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: ORASSIGN,
	// }
}

func ExampleExpr_lOr() {
	fmt.Println(exampleAST(44, "\U00100000 'a' || 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprLOr,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: OROR,
	// }
}

func ExampleExpr_mod() {
	fmt.Println(exampleAST(45, "\U00100000 'a' % 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprMod,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '%',
	// }
}

func ExampleExpr_and() {
	fmt.Println(exampleAST(46, "\U00100000 'a' & 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprAnd,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '&',
	// }
}

func ExampleExpr_call() {
	fmt.Println(exampleAST(47, "\U00100000 'a' ( )"))
	// Output:
	// &c99.Expr{
	// · Case: ExprCall,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '(',
	// · Token2: ')',
	// }
}

func ExampleExpr_mul() {
	fmt.Println(exampleAST(48, "\U00100000 'a' * 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprMul,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '*',
	// }
}

func ExampleExpr_add() {
	fmt.Println(exampleAST(49, "\U00100000 'a' + 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprAdd,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '+',
	// }
}

func ExampleExpr_sub() {
	fmt.Println(exampleAST(50, "\U00100000 'a' - 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprSub,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '-',
	// }
}

func ExampleExpr_select() {
	fmt.Println(exampleAST(51, "\U00100000 'a' . b"))
	// Output:
	// &c99.Expr{
	// · Case: ExprSelect,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: '.',
	// · Token2: IDENTIFIER "b",
	// }
}

func ExampleExpr_div() {
	fmt.Println(exampleAST(52, "\U00100000 'a' / 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprDiv,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '/',
	// }
}

func ExampleExpr_lt() {
	fmt.Println(exampleAST(53, "\U00100000 'a' < 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprLt,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '<',
	// }
}

func ExampleExpr_assign() {
	fmt.Println(exampleAST(54, "\U00100000 'a' = 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprAssign,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '=',
	// }
}

func ExampleExpr_gt() {
	fmt.Println(exampleAST(55, "\U00100000 'a' > 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprGt,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '>',
	// }
}

func ExampleExpr_cond() {
	fmt.Println(exampleAST(56, "\U00100000 'a' ? 'b' : 'c'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprCond,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'c'",
	// · },
	// · ExprList: &c99.ExprList{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Token: '?',
	// · Token2: ':',
	// }
}

func ExampleExpr_index() {
	fmt.Println(exampleAST(57, "\U00100000 'a' [ 'b' ]"))
	// Output:
	// &c99.Expr{
	// · Case: ExprIndex,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · ExprList: &c99.ExprList{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Token: '[',
	// · Token2: ']',
	// }
}

func ExampleExpr_xor() {
	fmt.Println(exampleAST(58, "\U00100000 'a' ^ 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprXor,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '^',
	// }
}

func ExampleExpr_or() {
	fmt.Println(exampleAST(59, "\U00100000 'a' | 'b'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprOr,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Expr2: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// · Token: '|',
	// }
}

func ExampleExpr_float() {
	fmt.Println(exampleAST(60, "\U00100000 1.97"))
	// Output:
	// &c99.Expr{
	// · Case: ExprFloat,
	// · Token: FLOATCONST "1.97",
	// }
}

func ExampleExpr_ident() {
	fmt.Println(exampleAST(61, "\U00100001 a { b %"))
	// Output:
	// &c99.Expr{
	// · Scope: &c99.Scope{
	// · },
	// · Case: ExprIdent,
	// · Token: IDENTIFIER "b",
	// }
}

func ExampleExpr_int() {
	fmt.Println(exampleAST(62, "\U00100000 97"))
	// Output:
	// &c99.Expr{
	// · Case: ExprInt,
	// · Token: INTCONST "97",
	// }
}

func ExampleExpr_lChar() {
	fmt.Println(exampleAST(63, "\U00100000 L'a'"))
	// Output:
	// &c99.Expr{
	// · Case: ExprLChar,
	// · Token: LONGCHARCONST "L'a'",
	// }
}

func ExampleExpr_lString() {
	fmt.Println(exampleAST(64, "\U00100000 L\"a\""))
	// Output:
	// &c99.Expr{
	// · Case: ExprLString,
	// · Token: LONGSTRINGLITERAL "L\"a\"",
	// }
}

func ExampleExpr_string() {
	fmt.Println(exampleAST(65, "\U00100000 \"a\""))
	// Output:
	// &c99.Expr{
	// · Case: ExprString,
	// · Token: STRINGLITERAL "\"a\"",
	// }
}

func ExampleExprList_case0() {
	fmt.Println(exampleAST(68, "\U00100000 ( 'a' )"))
	// Output:
	// &c99.ExprList{
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// }
}

func ExampleExprList_case1() {
	fmt.Println(exampleAST(69, "\U00100000 ( 'a' , 'b' )"))
	// Output:
	// &c99.ExprList{
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · ExprList: &c99.ExprList{
	// · · Case: 1,
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · · Token: ',',
	// · },
	// }
}

func ExampleExprListOpt_case0() {
	fmt.Println(exampleAST(70, "\U00100001 a { ;") == (*ExprListOpt)(nil))
	// Output:
	// true
}

func ExampleExprListOpt_case1() {
	fmt.Println(exampleAST(71, "\U00100001 a { 'b' )"))
	// Output:
	// &c99.ExprListOpt{
	// · ExprList: &c99.ExprList{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// }
}

func ExampleExprOpt_case0() {
	fmt.Println(exampleAST(66, "\U00100000 ( _Bool [ ]") == (*ExprOpt)(nil))
	// Output:
	// true
}

func ExampleExprOpt_case1() {
	fmt.Println(exampleAST(67, "\U00100001 a [ 'b' ]"))
	// Output:
	// &c99.ExprOpt{
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// }
}

func ExampleExprStmt_case0() {
	fmt.Println(exampleAST(216, "\U00100001 a { ; !"))
	// Output:
	// &c99.ExprStmt{
	// · Token: ';',
	// }
}

func ExampleExternalDeclaration_decl() {
	fmt.Println(exampleAST(230, "\U00100001 auto ;"))
	// Output:
	// &c99.ExternalDeclaration{
	// · Declaration: &c99.Declaration{
	// · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · Case: 1,
	// · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · Token: AUTO "auto",
	// · · · },
	// · · },
	// · · Token: ';',
	// · },
	// }
}

func ExampleExternalDeclaration_func() {
	fmt.Println(exampleAST(231, "\U00100001 a { }"))
	// Output:
	// &c99.ExternalDeclaration{
	// · Case: 1,
	// · FunctionDefinition: &c99.FunctionDefinition{
	// · · Case: 1,
	// · · Declarator: &c99.Declarator{
	// · · · FunctionDefinition: &c99.FunctionDefinition{ /* recursive/repetitive pointee not shown */ },
	// · · · Linkage: LinkageNone,
	// · · · StorageDuration: StorageDurationAutomatic,
	// · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · Case: DirectDeclaratorIdent,
	// · · · · Token: IDENTIFIER "a",
	// · · · },
	// · · },
	// · · FunctionBody: &c99.FunctionBody{
	// · · · CompoundStmt: &c99.CompoundStmt{
	// · · · · BlockItemListOpt: &c99.BlockItemListOpt{
	// · · · · · BlockItemList: &c99.BlockItemList{
	// · · · · · · BlockItem: &c99.BlockItem{
	// · · · · · · · Declaration: &c99.Declaration{
	// · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · Case: 1,
	// · · · · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · · · Case: 2,
	// · · · · · · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · · · · · Case: 3,
	// · · · · · · · · · · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · · · · · · · · · · Case: 2,
	// · · · · · · · · · · · · · · Token: CHAR "char",
	// · · · · · · · · · · · · · },
	// · · · · · · · · · · · · },
	// · · · · · · · · · · · },
	// · · · · · · · · · · · TypeQualifier: &c99.TypeQualifier{
	// · · · · · · · · · · · · Token: CONST "const",
	// · · · · · · · · · · · },
	// · · · · · · · · · · },
	// · · · · · · · · · },
	// · · · · · · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · · · · · · Case: 3,
	// · · · · · · · · · · Token: STATIC "static",
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · · InitDeclaratorListOpt: &c99.InitDeclaratorListOpt{
	// · · · · · · · · · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · · · · · · · · · InitDeclarator: &c99.InitDeclarator{
	// · · · · · · · · · · · Case: 1,
	// · · · · · · · · · · · Declarator: &c99.Declarator{
	// · · · · · · · · · · · · Linkage: LinkageNone,
	// · · · · · · · · · · · · Scope: &c99.Scope{
	// · · · · · · · · · · · · · Parent: &c99.Scope{ /* recursive/repetitive pointee not shown */ },
	// · · · · · · · · · · · · },
	// · · · · · · · · · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · · · · Case: DirectDeclaratorArray,
	// · · · · · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · · · · · Case: DirectDeclaratorIdent,
	// · · · · · · · · · · · · · · Token: IDENTIFIER "__func__",
	// · · · · · · · · · · · · · },
	// · · · · · · · · · · · · · Token: '[',
	// · · · · · · · · · · · · · Token2: ']',
	// · · · · · · · · · · · · },
	// · · · · · · · · · · · },
	// · · · · · · · · · · · Initializer: &c99.Initializer{
	// · · · · · · · · · · · · Case: 1,
	// · · · · · · · · · · · · Expr: &c99.Expr{
	// · · · · · · · · · · · · · Case: ExprString,
	// · · · · · · · · · · · · · Token: STRINGLITERAL "\"a\"",
	// · · · · · · · · · · · · },
	// · · · · · · · · · · · },
	// · · · · · · · · · · · Token: '=',
	// · · · · · · · · · · },
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · · Token: ';',
	// · · · · · · · },
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · · Token: '{',
	// · · · · Token2: '}',
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExternalDeclarationList_case0() {
	fmt.Println(exampleAST(228, "\U00100001 auto ;"))
	// Output:
	// &c99.ExternalDeclarationList{
	// · ExternalDeclaration: &c99.ExternalDeclaration{
	// · · Declaration: &c99.Declaration{
	// · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · Case: 1,
	// · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · Token: AUTO "auto",
	// · · · · },
	// · · · },
	// · · · Token: ';',
	// · · },
	// · },
	// }
}

func ExampleExternalDeclarationList_case1() {
	fmt.Println(exampleAST(229, "\U00100001 auto ; auto ;"))
	// Output:
	// &c99.ExternalDeclarationList{
	// · ExternalDeclaration: &c99.ExternalDeclaration{
	// · · Declaration: &c99.Declaration{
	// · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · Case: 1,
	// · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · Token: AUTO "auto",
	// · · · · },
	// · · · },
	// · · · Token: ';',
	// · · },
	// · },
	// · ExternalDeclarationList: &c99.ExternalDeclarationList{
	// · · Case: 1,
	// · · ExternalDeclaration: &c99.ExternalDeclaration{
	// · · · Declaration: &c99.Declaration{
	// · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · Case: 1,
	// · · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · · Token: AUTO "auto",
	// · · · · · },
	// · · · · },
	// · · · · Token: ';',
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleFunctionBody_case0() {
	fmt.Println(exampleAST(237, "\U00100001 a { }"))
	// Output:
	// &c99.FunctionBody{
	// · CompoundStmt: &c99.CompoundStmt{
	// · · BlockItemListOpt: &c99.BlockItemListOpt{
	// · · · BlockItemList: &c99.BlockItemList{
	// · · · · BlockItem: &c99.BlockItem{
	// · · · · · Declaration: &c99.Declaration{
	// · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · Case: 1,
	// · · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · Case: 2,
	// · · · · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · · · Case: 3,
	// · · · · · · · · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · · · · · · · · Case: 2,
	// · · · · · · · · · · · · Token: CHAR "char",
	// · · · · · · · · · · · },
	// · · · · · · · · · · },
	// · · · · · · · · · },
	// · · · · · · · · · TypeQualifier: &c99.TypeQualifier{
	// · · · · · · · · · · Token: CONST "const",
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · · · · Case: 3,
	// · · · · · · · · Token: STATIC "static",
	// · · · · · · · },
	// · · · · · · },
	// · · · · · · InitDeclaratorListOpt: &c99.InitDeclaratorListOpt{
	// · · · · · · · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · · · · · · · InitDeclarator: &c99.InitDeclarator{
	// · · · · · · · · · Case: 1,
	// · · · · · · · · · Declarator: &c99.Declarator{
	// · · · · · · · · · · Linkage: LinkageNone,
	// · · · · · · · · · · Scope: &c99.Scope{
	// · · · · · · · · · · },
	// · · · · · · · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · · Case: DirectDeclaratorArray,
	// · · · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · · · Case: DirectDeclaratorIdent,
	// · · · · · · · · · · · · Token: IDENTIFIER "__func__",
	// · · · · · · · · · · · },
	// · · · · · · · · · · · Token: '[',
	// · · · · · · · · · · · Token2: ']',
	// · · · · · · · · · · },
	// · · · · · · · · · },
	// · · · · · · · · · Initializer: &c99.Initializer{
	// · · · · · · · · · · Case: 1,
	// · · · · · · · · · · Expr: &c99.Expr{
	// · · · · · · · · · · · Case: ExprString,
	// · · · · · · · · · · · Token: STRINGLITERAL "\"a\"",
	// · · · · · · · · · · },
	// · · · · · · · · · },
	// · · · · · · · · · Token: '=',
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · },
	// · · · · · · Token: ';',
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: '{',
	// · · Token2: '}',
	// · },
	// }
}

func ExampleFunctionDefinition_spec() {
	fmt.Println(exampleAST(233, "\U00100001 auto a { }"))
	// Output:
	// &c99.FunctionDefinition{
	// · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · Case: 1,
	// · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · Token: AUTO "auto",
	// · · },
	// · },
	// · Declarator: &c99.Declarator{
	// · · FunctionDefinition: &c99.FunctionDefinition{ /* recursive/repetitive pointee not shown */ },
	// · · Linkage: LinkageNone,
	// · · StorageDuration: StorageDurationAutomatic,
	// · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · Case: DirectDeclaratorIdent,
	// · · · Token: IDENTIFIER "a",
	// · · },
	// · },
	// · FunctionBody: &c99.FunctionBody{
	// · · CompoundStmt: &c99.CompoundStmt{
	// · · · BlockItemListOpt: &c99.BlockItemListOpt{
	// · · · · BlockItemList: &c99.BlockItemList{
	// · · · · · BlockItem: &c99.BlockItem{
	// · · · · · · Declaration: &c99.Declaration{
	// · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · Case: 1,
	// · · · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · · Case: 2,
	// · · · · · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · · · · Case: 3,
	// · · · · · · · · · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · · · · · · · · · Case: 2,
	// · · · · · · · · · · · · · Token: CHAR "char",
	// · · · · · · · · · · · · },
	// · · · · · · · · · · · },
	// · · · · · · · · · · },
	// · · · · · · · · · · TypeQualifier: &c99.TypeQualifier{
	// · · · · · · · · · · · Token: CONST "const",
	// · · · · · · · · · · },
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · · · · · Case: 3,
	// · · · · · · · · · Token: STATIC "static",
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · · InitDeclaratorListOpt: &c99.InitDeclaratorListOpt{
	// · · · · · · · · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · · · · · · · · InitDeclarator: &c99.InitDeclarator{
	// · · · · · · · · · · Case: 1,
	// · · · · · · · · · · Declarator: &c99.Declarator{
	// · · · · · · · · · · · Linkage: LinkageNone,
	// · · · · · · · · · · · Scope: &c99.Scope{
	// · · · · · · · · · · · · Parent: &c99.Scope{ /* recursive/repetitive pointee not shown */ },
	// · · · · · · · · · · · },
	// · · · · · · · · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · · · Case: DirectDeclaratorArray,
	// · · · · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · · · · Case: DirectDeclaratorIdent,
	// · · · · · · · · · · · · · Token: IDENTIFIER "__func__",
	// · · · · · · · · · · · · },
	// · · · · · · · · · · · · Token: '[',
	// · · · · · · · · · · · · Token2: ']',
	// · · · · · · · · · · · },
	// · · · · · · · · · · },
	// · · · · · · · · · · Initializer: &c99.Initializer{
	// · · · · · · · · · · · Case: 1,
	// · · · · · · · · · · · Expr: &c99.Expr{
	// · · · · · · · · · · · · Case: ExprString,
	// · · · · · · · · · · · · Token: STRINGLITERAL "\"a\"",
	// · · · · · · · · · · · },
	// · · · · · · · · · · },
	// · · · · · · · · · · Token: '=',
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · · Token: ';',
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · Token: '{',
	// · · · Token2: '}',
	// · · },
	// · },
	// }
}

func ExampleFunctionDefinition_int() {
	fmt.Println(exampleAST(235, "\U00100001 a { }"))
	// Output:
	// &c99.FunctionDefinition{
	// · Case: 1,
	// · Declarator: &c99.Declarator{
	// · · FunctionDefinition: &c99.FunctionDefinition{ /* recursive/repetitive pointee not shown */ },
	// · · Linkage: LinkageNone,
	// · · StorageDuration: StorageDurationAutomatic,
	// · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · Case: DirectDeclaratorIdent,
	// · · · Token: IDENTIFIER "a",
	// · · },
	// · },
	// · FunctionBody: &c99.FunctionBody{
	// · · CompoundStmt: &c99.CompoundStmt{
	// · · · BlockItemListOpt: &c99.BlockItemListOpt{
	// · · · · BlockItemList: &c99.BlockItemList{
	// · · · · · BlockItem: &c99.BlockItem{
	// · · · · · · Declaration: &c99.Declaration{
	// · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · Case: 1,
	// · · · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · · Case: 2,
	// · · · · · · · · · · DeclarationSpecifiersOpt: &c99.DeclarationSpecifiersOpt{
	// · · · · · · · · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · · · · · · · · Case: 3,
	// · · · · · · · · · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · · · · · · · · · Case: 2,
	// · · · · · · · · · · · · · Token: CHAR "char",
	// · · · · · · · · · · · · },
	// · · · · · · · · · · · },
	// · · · · · · · · · · },
	// · · · · · · · · · · TypeQualifier: &c99.TypeQualifier{
	// · · · · · · · · · · · Token: CONST "const",
	// · · · · · · · · · · },
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · · · · · Case: 3,
	// · · · · · · · · · Token: STATIC "static",
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · · InitDeclaratorListOpt: &c99.InitDeclaratorListOpt{
	// · · · · · · · · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · · · · · · · · InitDeclarator: &c99.InitDeclarator{
	// · · · · · · · · · · Case: 1,
	// · · · · · · · · · · Declarator: &c99.Declarator{
	// · · · · · · · · · · · Linkage: LinkageNone,
	// · · · · · · · · · · · Scope: &c99.Scope{
	// · · · · · · · · · · · · Parent: &c99.Scope{ /* recursive/repetitive pointee not shown */ },
	// · · · · · · · · · · · },
	// · · · · · · · · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · · · Case: DirectDeclaratorArray,
	// · · · · · · · · · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · · · · · · · · · Case: DirectDeclaratorIdent,
	// · · · · · · · · · · · · · Token: IDENTIFIER "__func__",
	// · · · · · · · · · · · · },
	// · · · · · · · · · · · · Token: '[',
	// · · · · · · · · · · · · Token2: ']',
	// · · · · · · · · · · · },
	// · · · · · · · · · · },
	// · · · · · · · · · · Initializer: &c99.Initializer{
	// · · · · · · · · · · · Case: 1,
	// · · · · · · · · · · · Expr: &c99.Expr{
	// · · · · · · · · · · · · Case: ExprString,
	// · · · · · · · · · · · · Token: STRINGLITERAL "\"a\"",
	// · · · · · · · · · · · },
	// · · · · · · · · · · },
	// · · · · · · · · · · Token: '=',
	// · · · · · · · · · },
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · · Token: ';',
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · Token: '{',
	// · · · Token2: '}',
	// · · },
	// · },
	// }
}

func ExampleFunctionSpecifier_case0() {
	fmt.Println(exampleAST(136, "\U00100001 inline ("))
	// Output:
	// &c99.FunctionSpecifier{
	// · Token: INLINE "inline",
	// }
}

func ExampleIdentifierList_case0() {
	fmt.Println(exampleAST(166, "\U00100001 a ( b )"))
	// Output:
	// &c99.IdentifierList{
	// · Token: IDENTIFIER "b",
	// }
}

func ExampleIdentifierList_case1() {
	fmt.Println(exampleAST(167, "\U00100001 a ( b , c )"))
	// Output:
	// &c99.IdentifierList{
	// · IdentifierList: &c99.IdentifierList{
	// · · Case: 1,
	// · · Token: ',',
	// · · Token2: IDENTIFIER "c",
	// · },
	// · Token: IDENTIFIER "b",
	// }
}

func ExampleIdentifierListOpt_case0() {
	fmt.Println(exampleAST(168, "\U00100001 a ( )") == (*IdentifierListOpt)(nil))
	// Output:
	// true
}

func ExampleIdentifierListOpt_case1() {
	fmt.Println(exampleAST(169, "\U00100001 a ( b )"))
	// Output:
	// &c99.IdentifierListOpt{
	// · IdentifierList: &c99.IdentifierList{
	// · · Token: IDENTIFIER "b",
	// · },
	// }
}

func ExampleIdentifierOpt_case0() {
	fmt.Println(exampleAST(170, "\U00100001 struct {") == (*IdentifierOpt)(nil))
	// Output:
	// true
}

func ExampleIdentifierOpt_case1() {
	fmt.Println(exampleAST(171, "\U00100001 enum a {"))
	// Output:
	// &c99.IdentifierOpt{
	// · Token: IDENTIFIER "a",
	// }
}

func ExampleInitDeclarator_base() {
	fmt.Println(exampleAST(84, "\U00100001 a auto b ,"))
	// Output:
	// &c99.InitDeclarator{
	// · Declarator: &c99.Declarator{
	// · · Linkage: LinkageNone,
	// · · StorageDuration: StorageDurationAutomatic,
	// · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · Case: DirectDeclaratorIdent,
	// · · · Token: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleInitDeclarator_init() {
	fmt.Println(exampleAST(85, "\U00100001 auto a = 'b' ,"))
	// Output:
	// &c99.InitDeclarator{
	// · Case: 1,
	// · Declarator: &c99.Declarator{
	// · · Linkage: LinkageNone,
	// · · StorageDuration: StorageDurationAutomatic,
	// · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · Case: DirectDeclaratorIdent,
	// · · · Token: IDENTIFIER "a",
	// · · },
	// · },
	// · Initializer: &c99.Initializer{
	// · · Case: 1,
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Token: '=',
	// }
}

func ExampleInitDeclaratorList_case0() {
	fmt.Println(exampleAST(80, "\U00100001 auto a ,"))
	// Output:
	// &c99.InitDeclaratorList{
	// · InitDeclarator: &c99.InitDeclarator{
	// · · Declarator: &c99.Declarator{
	// · · · Linkage: LinkageNone,
	// · · · StorageDuration: StorageDurationAutomatic,
	// · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · Case: DirectDeclaratorIdent,
	// · · · · Token: IDENTIFIER "a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleInitDeclaratorList_case1() {
	fmt.Println(exampleAST(81, "\U00100001 auto a , b ,"))
	// Output:
	// &c99.InitDeclaratorList{
	// · InitDeclarator: &c99.InitDeclarator{
	// · · Declarator: &c99.Declarator{
	// · · · Linkage: LinkageNone,
	// · · · StorageDuration: StorageDurationAutomatic,
	// · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · Case: DirectDeclaratorIdent,
	// · · · · Token: IDENTIFIER "a",
	// · · · },
	// · · },
	// · },
	// · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · Case: 1,
	// · · InitDeclarator: &c99.InitDeclarator{
	// · · · Declarator: &c99.Declarator{
	// · · · · Linkage: LinkageNone,
	// · · · · Scope: &c99.Scope{ /* recursive/repetitive pointee not shown */ },
	// · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · Case: DirectDeclaratorIdent,
	// · · · · · Token: IDENTIFIER "b",
	// · · · · },
	// · · · },
	// · · },
	// · · Token: ',',
	// · },
	// }
}

func ExampleInitDeclaratorListOpt_case0() {
	fmt.Println(exampleAST(82, "\U00100001 auto ;") == (*InitDeclaratorListOpt)(nil))
	// Output:
	// true
}

func ExampleInitDeclaratorListOpt_case1() {
	fmt.Println(exampleAST(83, "\U00100001 auto a ;"))
	// Output:
	// &c99.InitDeclaratorListOpt{
	// · InitDeclaratorList: &c99.InitDeclaratorList{
	// · · InitDeclarator: &c99.InitDeclarator{
	// · · · Declarator: &c99.Declarator{
	// · · · · Linkage: LinkageNone,
	// · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · Case: DirectDeclaratorIdent,
	// · · · · · Token: IDENTIFIER "a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleInitializer_compLit() {
	fmt.Println(exampleAST(187, "\U00100001 auto a = { } ,"))
	// Output:
	// &c99.Initializer{
	// · Token: '{',
	// · Token2: '}',
	// }
}

func ExampleInitializer_expr() {
	fmt.Println(exampleAST(188, "\U00100001 auto a = 'b' ,"))
	// Output:
	// &c99.Initializer{
	// · Case: 1,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'b'",
	// · },
	// }
}

func ExampleInitializerList_case0() {
	fmt.Println(exampleAST(189, "\U00100000 ( _Bool ) { ,") == (*InitializerList)(nil))
	// Output:
	// true
}

func ExampleInitializerList_case1() {
	fmt.Println(exampleAST(190, "\U00100000 ( _Bool ) { 'a' ,"))
	// Output:
	// &c99.InitializerList{
	// · Case: 1,
	// · Initializer: &c99.Initializer{
	// · · Case: 1,
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'a'",
	// · · },
	// · },
	// }
}

func ExampleInitializerList_case2() {
	fmt.Println(exampleAST(191, "\U00100000 ( _Bool ) { . a = 'b' ,"))
	// Output:
	// &c99.InitializerList{
	// · Case: 2,
	// · Designation: &c99.Designation{
	// · · DesignatorList: &c99.DesignatorList{
	// · · · Designator: &c99.Designator{
	// · · · · Token: '.',
	// · · · · Token2: IDENTIFIER "a",
	// · · · },
	// · · },
	// · · Token: '=',
	// · },
	// · Initializer: &c99.Initializer{
	// · · Case: 1,
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// }
}

func ExampleInitializerList_case3() {
	fmt.Println(exampleAST(192, "\U00100000 ( _Bool ) { , 'a' ,"))
	// Output:
	// &c99.InitializerList{
	// · Case: 3,
	// · Initializer: &c99.Initializer{
	// · · Case: 1,
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'a'",
	// · · },
	// · },
	// · Token: ',',
	// }
}

func ExampleInitializerList_case4() {
	fmt.Println(exampleAST(193, "\U00100000 ( _Bool ) { , . a = 'b' ,"))
	// Output:
	// &c99.InitializerList{
	// · Case: 4,
	// · Designation: &c99.Designation{
	// · · DesignatorList: &c99.DesignatorList{
	// · · · Designator: &c99.Designator{
	// · · · · Token: '.',
	// · · · · Token2: IDENTIFIER "a",
	// · · · },
	// · · },
	// · · Token: '=',
	// · },
	// · Initializer: &c99.Initializer{
	// · · Case: 1,
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Token: ',',
	// }
}

func ExampleIterationStmt_do() {
	fmt.Println(exampleAST(220, "\U00100001 a { do ; while ( 'b' ) ; !"))
	// Output:
	// &c99.IterationStmt{
	// · ExprList: &c99.ExprList{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Token: DO "do",
	// · Token2: WHILE "while",
	// · Token3: '(',
	// · Token4: ')',
	// · Token5: ';',
	// }
}

func ExampleIterationStmt_forDecl() {
	fmt.Println(exampleAST(221, "\U00100001 a { for ( auto ; ; ) ; !"))
	// Output:
	// &c99.IterationStmt{
	// · Case: 1,
	// · Declaration: &c99.Declaration{
	// · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · Case: 1,
	// · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · Token: AUTO "auto",
	// · · · },
	// · · },
	// · · Token: ';',
	// · },
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Token: FOR "for",
	// · Token2: '(',
	// · Token3: ';',
	// · Token4: ')',
	// }
}

func ExampleIterationStmt_for() {
	fmt.Println(exampleAST(222, "\U00100001 a { for ( ; ; ) ; !"))
	// Output:
	// &c99.IterationStmt{
	// · Case: 2,
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Token: FOR "for",
	// · Token2: '(',
	// · Token3: ';',
	// · Token4: ';',
	// · Token5: ')',
	// }
}

func ExampleIterationStmt_while() {
	fmt.Println(exampleAST(223, "\U00100001 a { while ( 'b' ) ; !"))
	// Output:
	// &c99.IterationStmt{
	// · Case: 3,
	// · ExprList: &c99.ExprList{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Token: WHILE "while",
	// · Token2: '(',
	// · Token3: ')',
	// }
}

func ExampleJumpStmt_break() {
	fmt.Println(exampleAST(224, "\U00100001 a { break ; !"))
	// Output:
	// &c99.JumpStmt{
	// · Token: BREAK "break",
	// · Token2: ';',
	// }
}

func ExampleJumpStmt_continue() {
	fmt.Println(exampleAST(225, "\U00100001 a { continue ; !"))
	// Output:
	// &c99.JumpStmt{
	// · Case: 1,
	// · Token: CONTINUE "continue",
	// · Token2: ';',
	// }
}

func ExampleJumpStmt_goto() {
	fmt.Println(exampleAST(226, "\U00100001 a { goto b ; !"))
	// Output:
	// &c99.JumpStmt{
	// · Case: 2,
	// · Token: GOTO "goto",
	// · Token2: IDENTIFIER "b",
	// · Token3: ';',
	// }
}

func ExampleJumpStmt_return() {
	fmt.Println(exampleAST(227, "\U00100001 a { return ; !"))
	// Output:
	// &c99.JumpStmt{
	// · Case: 3,
	// · Token: RETURN "return",
	// · Token2: ';',
	// }
}

func ExampleLabeledStmt_switchCase() {
	fmt.Println(exampleAST(205, "\U00100001 a { case 'b' : ; !"))
	// Output:
	// &c99.LabeledStmt{
	// · ConstExpr: &c99.ConstExpr{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Token: CASE "case",
	// · Token2: ':',
	// }
}

func ExampleLabeledStmt_default() {
	fmt.Println(exampleAST(206, "\U00100001 a { default : ; !"))
	// Output:
	// &c99.LabeledStmt{
	// · Case: 1,
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Token: DEFAULT "default",
	// · Token2: ':',
	// }
}

func ExampleLabeledStmt_label() {
	fmt.Println(exampleAST(207, "\U00100001 a { b : ; !"))
	// Output:
	// &c99.LabeledStmt{
	// · Case: 2,
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Token: IDENTIFIER "b",
	// · Token2: ':',
	// }
}

func ExampleParameterDeclaration_abstract() {
	fmt.Println(exampleAST(164, "\U00100001 a ( auto )"))
	// Output:
	// &c99.ParameterDeclaration{
	// · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · Case: 1,
	// · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · Token: AUTO "auto",
	// · · },
	// · },
	// }
}

func ExampleParameterDeclaration_declarator() {
	fmt.Println(exampleAST(165, "\U00100001 a ( auto b )"))
	// Output:
	// &c99.ParameterDeclaration{
	// · Case: 1,
	// · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · Case: 1,
	// · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · Token: AUTO "auto",
	// · · },
	// · },
	// · Declarator: &c99.Declarator{
	// · · Linkage: LinkageNone,
	// · · Scope: &c99.Scope{
	// · · },
	// · · StorageDuration: StorageDurationAutomatic,
	// · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · Case: DirectDeclaratorIdent,
	// · · · Token: IDENTIFIER "b",
	// · · },
	// · },
	// }
}

func ExampleParameterList_case0() {
	fmt.Println(exampleAST(162, "\U00100001 a ( auto )"))
	// Output:
	// &c99.ParameterList{
	// · ParameterDeclaration: &c99.ParameterDeclaration{
	// · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · Case: 1,
	// · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · Token: AUTO "auto",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleParameterList_case1() {
	fmt.Println(exampleAST(163, "\U00100001 a ( auto , auto )"))
	// Output:
	// &c99.ParameterList{
	// · ParameterDeclaration: &c99.ParameterDeclaration{
	// · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · Case: 1,
	// · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · Token: AUTO "auto",
	// · · · },
	// · · },
	// · },
	// · ParameterList: &c99.ParameterList{
	// · · Case: 1,
	// · · ParameterDeclaration: &c99.ParameterDeclaration{
	// · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · Case: 1,
	// · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · Token: AUTO "auto",
	// · · · · },
	// · · · },
	// · · },
	// · · Token: ',',
	// · },
	// }
}

func ExampleParameterTypeList_base() {
	fmt.Println(exampleAST(158, "\U00100001 a ( auto )"))
	// Output:
	// &c99.ParameterTypeList{
	// · ParameterList: &c99.ParameterList{
	// · · ParameterDeclaration: &c99.ParameterDeclaration{
	// · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · Case: 1,
	// · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · Token: AUTO "auto",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleParameterTypeList_dots() {
	fmt.Println(exampleAST(159, "\U00100001 a ( auto , ... )"))
	// Output:
	// &c99.ParameterTypeList{
	// · Case: 1,
	// · ParameterList: &c99.ParameterList{
	// · · ParameterDeclaration: &c99.ParameterDeclaration{
	// · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · Case: 1,
	// · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · Token: AUTO "auto",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: ',',
	// · Token2: DDD,
	// }
}

func ExampleParameterTypeListOpt_case0() {
	fmt.Println(exampleAST(160, "\U00100000 ( _Bool ( )") == (*ParameterTypeListOpt)(nil))
	// Output:
	// true
}

func ExampleParameterTypeListOpt_case1() {
	fmt.Println(exampleAST(161, "\U00100000 ( _Bool ( auto )"))
	// Output:
	// &c99.ParameterTypeListOpt{
	// · ParameterTypeList: &c99.ParameterTypeList{
	// · · ParameterList: &c99.ParameterList{
	// · · · ParameterDeclaration: &c99.ParameterDeclaration{
	// · · · · DeclarationSpecifiers: &c99.DeclarationSpecifiers{
	// · · · · · Case: 1,
	// · · · · · StorageClassSpecifier: &c99.StorageClassSpecifier{
	// · · · · · · Token: AUTO "auto",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePointer_base() {
	fmt.Println(exampleAST(150, "\U00100001 * ("))
	// Output:
	// &c99.Pointer{
	// · Token: '*',
	// }
}

func ExamplePointer_ptr() {
	fmt.Println(exampleAST(151, "\U00100001 * * ("))
	// Output:
	// &c99.Pointer{
	// · Case: 1,
	// · Pointer: &c99.Pointer{
	// · · Token: '*',
	// · },
	// · Token: '*',
	// }
}

func ExamplePointerOpt_case0() {
	fmt.Println(exampleAST(152, "\U00100001 (") == (*PointerOpt)(nil))
	// Output:
	// true
}

func ExamplePointerOpt_case1() {
	fmt.Println(exampleAST(153, "\U00100001 * ("))
	// Output:
	// &c99.PointerOpt{
	// · Pointer: &c99.Pointer{
	// · · Token: '*',
	// · },
	// }
}

func ExampleSelectionStmt_ifElse() {
	fmt.Println(exampleAST(217, "\U00100001 a { if ( 'b' ) ; else ; !"))
	// Output:
	// &c99.SelectionStmt{
	// · ExprList: &c99.ExprList{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Stmt2: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Token: IF "if",
	// · Token2: '(',
	// · Token3: ')',
	// · Token4: ELSE "else",
	// }
}

func ExampleSelectionStmt_if() {
	fmt.Println(exampleAST(218, "\U00100001 a { if ( 'b' ) ; !"))
	// Output:
	// &c99.SelectionStmt{
	// · Case: 1,
	// · ExprList: &c99.ExprList{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Token: IF "if",
	// · Token2: '(',
	// · Token3: ')',
	// }
}

func ExampleSelectionStmt_switch() {
	fmt.Println(exampleAST(219, "\U00100001 a { switch ( 'b' ) ; !"))
	// Output:
	// &c99.SelectionStmt{
	// · Case: 2,
	// · ExprList: &c99.ExprList{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'b'",
	// · · },
	// · },
	// · Stmt: &c99.Stmt{
	// · · Case: 1,
	// · · ExprStmt: &c99.ExprStmt{
	// · · · Token: ';',
	// · · },
	// · },
	// · Token: SWITCH "switch",
	// · Token2: '(',
	// · Token3: ')',
	// }
}

func ExampleSpecifierQualifierList_qualifier() {
	fmt.Println(exampleAST(117, "\U00100000 ( const ("))
	// Output:
	// &c99.SpecifierQualifierList{
	// · TypeQualifier: &c99.TypeQualifier{
	// · · Token: CONST "const",
	// · },
	// }
}

func ExampleSpecifierQualifierList_specifier() {
	fmt.Println(exampleAST(118, "\U00100000 ( _Bool ("))
	// Output:
	// &c99.SpecifierQualifierList{
	// · Case: 1,
	// · TypeSpecifier: &c99.TypeSpecifier{
	// · · Token: BOOL "_Bool",
	// · },
	// }
}

func ExampleSpecifierQualifierListOpt_case0() {
	fmt.Println(exampleAST(119, "\U00100000 ( const (") == (*SpecifierQualifierListOpt)(nil))
	// Output:
	// true
}

func ExampleSpecifierQualifierListOpt_case1() {
	fmt.Println(exampleAST(120, "\U00100000 ( const _Bool ("))
	// Output:
	// &c99.SpecifierQualifierListOpt{
	// · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · Case: 1,
	// · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · Token: BOOL "_Bool",
	// · · },
	// · },
	// }
}

func ExampleStmt_block() {
	fmt.Println(exampleAST(199, "\U00100001 a { { } !"))
	// Output:
	// &c99.Stmt{
	// · CompoundStmt: &c99.CompoundStmt{
	// · · Token: '{',
	// · · Token2: '}',
	// · },
	// }
}

func ExampleStmt_expr() {
	fmt.Println(exampleAST(200, "\U00100001 a { ; !"))
	// Output:
	// &c99.Stmt{
	// · Case: 1,
	// · ExprStmt: &c99.ExprStmt{
	// · · Token: ';',
	// · },
	// }
}

func ExampleStmt_iter() {
	fmt.Println(exampleAST(201, "\U00100001 a { while ( 'b' ) ; !"))
	// Output:
	// &c99.Stmt{
	// · Case: 2,
	// · IterationStmt: &c99.IterationStmt{
	// · · Case: 3,
	// · · ExprList: &c99.ExprList{
	// · · · Expr: &c99.Expr{
	// · · · · Case: ExprChar,
	// · · · · Token: CHARCONST "'b'",
	// · · · },
	// · · },
	// · · Stmt: &c99.Stmt{
	// · · · Case: 1,
	// · · · ExprStmt: &c99.ExprStmt{
	// · · · · Token: ';',
	// · · · },
	// · · },
	// · · Token: WHILE "while",
	// · · Token2: '(',
	// · · Token3: ')',
	// · },
	// }
}

func ExampleStmt_jump() {
	fmt.Println(exampleAST(202, "\U00100001 a { break ; !"))
	// Output:
	// &c99.Stmt{
	// · Case: 3,
	// · JumpStmt: &c99.JumpStmt{
	// · · Token: BREAK "break",
	// · · Token2: ';',
	// · },
	// }
}

func ExampleStmt_labeled() {
	fmt.Println(exampleAST(203, "\U00100001 a { default : ; !"))
	// Output:
	// &c99.Stmt{
	// · Case: 4,
	// · LabeledStmt: &c99.LabeledStmt{
	// · · Case: 1,
	// · · Stmt: &c99.Stmt{
	// · · · Case: 1,
	// · · · ExprStmt: &c99.ExprStmt{
	// · · · · Token: ';',
	// · · · },
	// · · },
	// · · Token: DEFAULT "default",
	// · · Token2: ':',
	// · },
	// }
}

func ExampleStmt_select() {
	fmt.Println(exampleAST(204, "\U00100001 a { if ( 'b' ) ; !"))
	// Output:
	// &c99.Stmt{
	// · Case: 5,
	// · SelectionStmt: &c99.SelectionStmt{
	// · · Case: 1,
	// · · ExprList: &c99.ExprList{
	// · · · Expr: &c99.Expr{
	// · · · · Case: ExprChar,
	// · · · · Token: CHARCONST "'b'",
	// · · · },
	// · · },
	// · · Stmt: &c99.Stmt{
	// · · · Case: 1,
	// · · · ExprStmt: &c99.ExprStmt{
	// · · · · Token: ';',
	// · · · },
	// · · },
	// · · Token: IF "if",
	// · · Token2: '(',
	// · · Token3: ')',
	// · },
	// }
}

func ExampleStorageClassSpecifier_auto() {
	fmt.Println(exampleAST(86, "\U00100001 auto ("))
	// Output:
	// &c99.StorageClassSpecifier{
	// · Token: AUTO "auto",
	// }
}

func ExampleStorageClassSpecifier_extern() {
	fmt.Println(exampleAST(87, "\U00100001 extern ("))
	// Output:
	// &c99.StorageClassSpecifier{
	// · Case: 1,
	// · Token: EXTERN "extern",
	// }
}

func ExampleStorageClassSpecifier_register() {
	fmt.Println(exampleAST(88, "\U00100001 register ("))
	// Output:
	// &c99.StorageClassSpecifier{
	// · Case: 2,
	// · Token: REGISTER "register",
	// }
}

func ExampleStorageClassSpecifier_static() {
	fmt.Println(exampleAST(89, "\U00100001 static ("))
	// Output:
	// &c99.StorageClassSpecifier{
	// · Case: 3,
	// · Token: STATIC "static",
	// }
}

func ExampleStorageClassSpecifier_typedef() {
	fmt.Println(exampleAST(90, "\U00100001 typedef ("))
	// Output:
	// &c99.StorageClassSpecifier{
	// · Case: 4,
	// · Token: TYPEDEF "typedef",
	// }
}

func ExampleStructDeclaration_base() {
	fmt.Println(exampleAST(115, "\U00100001 struct { _Bool a ; }"))
	// Output:
	// &c99.StructDeclaration{
	// · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · Case: 1,
	// · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · Token: BOOL "_Bool",
	// · · },
	// · },
	// · StructDeclaratorList: &c99.StructDeclaratorList{
	// · · StructDeclarator: &c99.StructDeclarator{
	// · · · Declarator: &c99.Declarator{
	// · · · · Linkage: LinkageNone,
	// · · · · Scope: &c99.Scope{
	// · · · · },
	// · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · Case: DirectDeclaratorIdent,
	// · · · · · Token: IDENTIFIER "a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: ';',
	// }
}

func ExampleStructDeclaration_anon() {
	fmt.Println(exampleAST(116, "\U00100001 struct { _Bool ; }"))
	// Output:
	// &c99.StructDeclaration{
	// · Case: 1,
	// · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · Case: 1,
	// · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · Token: BOOL "_Bool",
	// · · },
	// · },
	// · Token: ';',
	// }
}

func ExampleStructDeclarationList_case0() {
	fmt.Println(exampleAST(113, "\U00100001 struct { _Bool ; }"))
	// Output:
	// &c99.StructDeclarationList{
	// · StructDeclaration: &c99.StructDeclaration{
	// · · Case: 1,
	// · · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · · Case: 1,
	// · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · Token: BOOL "_Bool",
	// · · · },
	// · · },
	// · · Token: ';',
	// · },
	// }
}

func ExampleStructDeclarationList_case1() {
	fmt.Println(exampleAST(114, "\U00100001 struct { _Bool ; _Bool ; }"))
	// Output:
	// &c99.StructDeclarationList{
	// · StructDeclaration: &c99.StructDeclaration{
	// · · Case: 1,
	// · · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · · Case: 1,
	// · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · Token: BOOL "_Bool",
	// · · · },
	// · · },
	// · · Token: ';',
	// · },
	// · StructDeclarationList: &c99.StructDeclarationList{
	// · · Case: 1,
	// · · StructDeclaration: &c99.StructDeclaration{
	// · · · Case: 1,
	// · · · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · · · Case: 1,
	// · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · Token: BOOL "_Bool",
	// · · · · },
	// · · · },
	// · · · Token: ';',
	// · · },
	// · },
	// }
}

func ExampleStructDeclarator_base() {
	fmt.Println(exampleAST(123, "\U00100001 struct { _Bool a ,"))
	// Output:
	// &c99.StructDeclarator{
	// · Declarator: &c99.Declarator{
	// · · Linkage: LinkageNone,
	// · · Scope: &c99.Scope{
	// · · },
	// · · StorageDuration: StorageDurationAutomatic,
	// · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · Case: DirectDeclaratorIdent,
	// · · · Token: IDENTIFIER "a",
	// · · },
	// · },
	// }
}

func ExampleStructDeclarator_bits() {
	fmt.Println(exampleAST(124, "\U00100001 struct { _Bool : 'a' ,"))
	// Output:
	// &c99.StructDeclarator{
	// · Case: 1,
	// · ConstExpr: &c99.ConstExpr{
	// · · Expr: &c99.Expr{
	// · · · Case: ExprChar,
	// · · · Token: CHARCONST "'a'",
	// · · },
	// · },
	// · Token: ':',
	// }
}

func ExampleStructDeclaratorList_case0() {
	fmt.Println(exampleAST(121, "\U00100001 struct { _Bool a ,"))
	// Output:
	// &c99.StructDeclaratorList{
	// · StructDeclarator: &c99.StructDeclarator{
	// · · Declarator: &c99.Declarator{
	// · · · Linkage: LinkageNone,
	// · · · Scope: &c99.Scope{
	// · · · },
	// · · · StorageDuration: StorageDurationAutomatic,
	// · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · Case: DirectDeclaratorIdent,
	// · · · · Token: IDENTIFIER "a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleStructDeclaratorList_case1() {
	fmt.Println(exampleAST(122, "\U00100001 struct { _Bool a , b ,"))
	// Output:
	// &c99.StructDeclaratorList{
	// · StructDeclarator: &c99.StructDeclarator{
	// · · Declarator: &c99.Declarator{
	// · · · Linkage: LinkageNone,
	// · · · Scope: &c99.Scope{
	// · · · },
	// · · · StorageDuration: StorageDurationAutomatic,
	// · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · Case: DirectDeclaratorIdent,
	// · · · · Token: IDENTIFIER "a",
	// · · · },
	// · · },
	// · },
	// · StructDeclaratorList: &c99.StructDeclaratorList{
	// · · Case: 1,
	// · · StructDeclarator: &c99.StructDeclarator{
	// · · · Declarator: &c99.Declarator{
	// · · · · Linkage: LinkageNone,
	// · · · · Scope: &c99.Scope{ /* recursive/repetitive pointee not shown */ },
	// · · · · StorageDuration: StorageDurationAutomatic,
	// · · · · DirectDeclarator: &c99.DirectDeclarator{
	// · · · · · Case: DirectDeclaratorIdent,
	// · · · · · Token: IDENTIFIER "b",
	// · · · · },
	// · · · },
	// · · },
	// · · Token: ',',
	// · },
	// }
}

func ExampleStructOrUnion_struct() {
	fmt.Println(exampleAST(111, "\U00100001 struct {"))
	// Output:
	// &c99.StructOrUnion{
	// · Token: STRUCT "struct",
	// }
}

func ExampleStructOrUnion_union() {
	fmt.Println(exampleAST(112, "\U00100001 union {"))
	// Output:
	// &c99.StructOrUnion{
	// · Case: 1,
	// · Token: UNION "union",
	// }
}

func ExampleStructOrUnionSpecifier_tag() {
	fmt.Println(exampleAST(107, "\U00100001 struct a ("))
	// Output:
	// &c99.StructOrUnionSpecifier{
	// · StructOrUnion: &c99.StructOrUnion{
	// · · Token: STRUCT "struct",
	// · },
	// · Token: IDENTIFIER "a",
	// }
}

func ExampleStructOrUnionSpecifier_empty() {
	fmt.Println(exampleAST(108, "\U00100001 struct { } ("))
	// Output:
	// &c99.StructOrUnionSpecifier{
	// · Case: 1,
	// · StructOrUnion: &c99.StructOrUnion{
	// · · Token: STRUCT "struct",
	// · },
	// · Token: '{',
	// · Token2: '}',
	// }
}

func ExampleStructOrUnionSpecifier_define() {
	fmt.Println(exampleAST(110, "\U00100001 struct { _Bool ; } ("))
	// Output:
	// &c99.StructOrUnionSpecifier{
	// · Case: 2,
	// · StructDeclarationList: &c99.StructDeclarationList{
	// · · StructDeclaration: &c99.StructDeclaration{
	// · · · Case: 1,
	// · · · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · · · Case: 1,
	// · · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · · Token: BOOL "_Bool",
	// · · · · },
	// · · · },
	// · · · Token: ';',
	// · · },
	// · },
	// · StructOrUnion: &c99.StructOrUnion{
	// · · Token: STRUCT "struct",
	// · },
	// · Token: '{',
	// · Token2: '}',
	// }
}

func ExampleTypeName_case0() {
	fmt.Println(exampleAST(172, "\U00100000 ( _Bool )"))
	// Output:
	// &c99.TypeName{
	// · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · Case: 1,
	// · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · Token: BOOL "_Bool",
	// · · },
	// · },
	// }
}

func ExampleTypeQualifier_const() {
	fmt.Println(exampleAST(133, "\U00100001 const !"))
	// Output:
	// &c99.TypeQualifier{
	// · Token: CONST "const",
	// }
}

func ExampleTypeQualifier_restrict() {
	fmt.Println(exampleAST(134, "\U00100001 restrict !"))
	// Output:
	// &c99.TypeQualifier{
	// · Case: 1,
	// · Token: RESTRICT "restrict",
	// }
}

func ExampleTypeQualifier_volatile() {
	fmt.Println(exampleAST(135, "\U00100001 volatile !"))
	// Output:
	// &c99.TypeQualifier{
	// · Case: 2,
	// · Token: VOLATILE "volatile",
	// }
}

func ExampleTypeQualifierList_case0() {
	fmt.Println(exampleAST(154, "\U00100001 * const !"))
	// Output:
	// &c99.TypeQualifierList{
	// · TypeQualifier: &c99.TypeQualifier{
	// · · Token: CONST "const",
	// · },
	// }
}

func ExampleTypeQualifierList_case1() {
	fmt.Println(exampleAST(155, "\U00100001 * const const !"))
	// Output:
	// &c99.TypeQualifierList{
	// · TypeQualifier: &c99.TypeQualifier{
	// · · Token: CONST "const",
	// · },
	// · TypeQualifierList: &c99.TypeQualifierList{
	// · · Case: 1,
	// · · TypeQualifier: &c99.TypeQualifier{
	// · · · Token: CONST "const",
	// · · },
	// · },
	// }
}

func ExampleTypeQualifierListOpt_case0() {
	fmt.Println(exampleAST(156, "\U00100001 * (") == (*TypeQualifierListOpt)(nil))
	// Output:
	// true
}

func ExampleTypeQualifierListOpt_case1() {
	fmt.Println(exampleAST(157, "\U00100001 * const !"))
	// Output:
	// &c99.TypeQualifierListOpt{
	// · TypeQualifierList: &c99.TypeQualifierList{
	// · · TypeQualifier: &c99.TypeQualifier{
	// · · · Token: CONST "const",
	// · · },
	// · },
	// }
}

func ExampleTypeSpecifier_bool() {
	fmt.Println(exampleAST(91, "\U00100001 _Bool ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Token: BOOL "_Bool",
	// }
}

func ExampleTypeSpecifier_complex() {
	fmt.Println(exampleAST(92, "\U00100001 _Complex ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 1,
	// · Token: COMPLEX "_Complex",
	// }
}

func ExampleTypeSpecifier_char() {
	fmt.Println(exampleAST(93, "\U00100001 char ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 2,
	// · Token: CHAR "char",
	// }
}

func ExampleTypeSpecifier_double() {
	fmt.Println(exampleAST(94, "\U00100001 double ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 3,
	// · Token: DOUBLE "double",
	// }
}

func ExampleTypeSpecifier_float() {
	fmt.Println(exampleAST(95, "\U00100001 float ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 4,
	// · Token: FLOAT "float",
	// }
}

func ExampleTypeSpecifier_int() {
	fmt.Println(exampleAST(96, "\U00100001 int ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 5,
	// · Token: INT "int",
	// }
}

func ExampleTypeSpecifier_long() {
	fmt.Println(exampleAST(97, "\U00100001 long ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 6,
	// · Token: LONG "long",
	// }
}

func ExampleTypeSpecifier_short() {
	fmt.Println(exampleAST(98, "\U00100001 short ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 7,
	// · Token: SHORT "short",
	// }
}

func ExampleTypeSpecifier_signed() {
	fmt.Println(exampleAST(99, "\U00100001 signed ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 8,
	// · Token: SIGNED "signed",
	// }
}

func ExampleTypeSpecifier_unsigned() {
	fmt.Println(exampleAST(100, "\U00100001 unsigned ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 9,
	// · Token: UNSIGNED "unsigned",
	// }
}

func ExampleTypeSpecifier_void() {
	fmt.Println(exampleAST(101, "\U00100001 void ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 10,
	// · Token: VOID "void",
	// }
}

func ExampleTypeSpecifier_enum() {
	fmt.Println(exampleAST(102, "\U00100001 enum a ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 11,
	// · EnumSpecifier: &c99.EnumSpecifier{
	// · · Token: ENUM "enum",
	// · · Token2: IDENTIFIER "a",
	// · },
	// }
}

func ExampleTypeSpecifier_struct() {
	fmt.Println(exampleAST(103, "\U00100001 struct a ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 12,
	// · StructOrUnionSpecifier: &c99.StructOrUnionSpecifier{
	// · · StructOrUnion: &c99.StructOrUnion{
	// · · · Token: STRUCT "struct",
	// · · },
	// · · Token: IDENTIFIER "a",
	// · },
	// }
}

func ExampleTypeSpecifier_name() {
	fmt.Println(exampleAST(104, "\U00100001 typedef int foo; foo bar;"))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 13,
	// · Token: TYPEDEF_NAME "foo",
	// }
}

func ExampleTypeSpecifier_typeofExpr() {
	fmt.Println(exampleAST(105, "\U00100001 typeof ( 'a' ) ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 14,
	// · Expr: &c99.Expr{
	// · · Case: ExprChar,
	// · · Token: CHARCONST "'a'",
	// · },
	// · Token: TYPEOF "typeof",
	// · Token2: '(',
	// · Token3: ')',
	// }
}

func ExampleTypeSpecifier_typeof() {
	fmt.Println(exampleAST(106, "\U00100001 typeof ( _Bool ) ("))
	// Output:
	// &c99.TypeSpecifier{
	// · Case: 15,
	// · Token: TYPEOF "typeof",
	// · Token2: '(',
	// · Token3: ')',
	// · TypeName: &c99.TypeName{
	// · · SpecifierQualifierList: &c99.SpecifierQualifierList{
	// · · · Case: 1,
	// · · · TypeSpecifier: &c99.TypeSpecifier{
	// · · · · Token: BOOL "_Bool",
	// · · · },
	// · · },
	// · },
	// }
}
